"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[529],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=u(t),f=o,m=c["".concat(l,".").concat(f)]||c[f]||d[f]||i;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=c;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const i={id:"plugin-options",title:"Plugin Options",sidebar_position:4},s=void 0,a={unversionedId:"docs/bundle/plugin-options",id:"docs/bundle/plugin-options",title:"Plugin Options",description:"Plugin Options",source:"@site/docs/docs/bundle/plugin-options.md",sourceDirName:"docs/bundle",slug:"/docs/bundle/plugin-options",permalink:"/perfsee/docs/docs/bundle/plugin-options",draft:!1,editUrl:"https://github.com/perfsee/perfsee/tree/main/docs/docs/docs/bundle/plugin-options.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"plugin-options",title:"Plugin Options",sidebar_position:4},sidebar:"documentsSidebar",previous:{title:"Bundle Audits",permalink:"/perfsee/docs/docs/bundle/bundle-audits"},next:{title:"Get started",permalink:"/perfsee/docs/docs/lab/get-started"}},l={},u=[{value:"Plugin Options",id:"plugin-options",level:3}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"plugin-options"},"Plugin Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Options {\n  /**\n   * Your project ID on Perfsee platform.\n   *\n   * **Required if you want ot upload the build to Perfsee platform for further analysis.**\n   */\n  project?: string\n\n  /**\n   * Authentication token used for uploading build to remote server.\n   * will also read from env `PERFSEE_TOKEN` if not provided.\n   *\n   * @environment `PERFSEE_TOKEN`\n   */\n  token?: string\n\n  /**\n   * Give a uniq name for the bundled artifact.\n   *\n   * This option will be very useful when there are multiple builds in a single commit(in single CI progress)\n   *\n   * Because the comparasion with historical builds is based on `Entrypoint`, and if multiple builds\n   * emit same entrypoint names, we can't detect which entrypoint is the correct one to be compared.\n   *\n   * e.g. `build-1/main` and `build-2/main` are more confusing then `landing/main` and `customers/main`.\n   *\n   * @default 'main'\n   */\n  artifactName?: string\n\n  /**\n   * Enable analysis and audit right after bundle emitted.\n   *\n   * With this option being `true`, perfsee will output bundle analyzed result in-place in CI workflow,\n   * or start a server which serves html report viewer in non-CI environment.\n   *\n   * It would slow down the progress if enabled.\n   *\n   * @environment `PERFSEE_AUDIT`\n   *\n   * @default false\n   * @default true // \"in CI environment\"\n   */\n  enableAudit?: boolean\n\n  /**\n   * Used to customize project's own bundle auditing logic.\n   *\n   * Return `true` means this bundle should pass auditing, `false` to fail.\n   *\n   * Only used when `enableAudit` is true.\n   *\n   * @default (score) => score >= 80\n   */\n  shouldPassAudit?: (score: number, result: BundleResult) => Promise<boolean> | boolean\n\n  /**\n   * Fail the progress if bundle audit not pass and exit with non-zero code.\n   *\n   * set to `true` to fail the CI pipeline.\n   *\n   * @default false\n   */\n  failIfNotPass?: boolean\n\n  /**\n   * Server options used to start local report viewer\n   */\n  severOptions?: {\n    /**\n     * Port the local report server will listen on\n     *\n     * @default 8080\n     */\n    port?: number\n\n    /**\n     * Host of the local report server\n     *\n     * @default '127.0.0.1'\n     */\n    host?: string\n\n    /**\n     * Path of the static files used to render report.\n     *\n     * Unless you want to change the default report viewer, otherwise leave it undefined.\n     */\n    publicPath?: string\n  }\n}\n")))}d.isMDXComponent=!0}}]);